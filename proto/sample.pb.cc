// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sample.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sample.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ADSB {

namespace {

const ::google::protobuf::Descriptor* GeoCoordinates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeoCoordinates_reflection_ = NULL;
const ::google::protobuf::Descriptor* Aircraft_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Aircraft_reflection_ = NULL;
const ::google::protobuf::Descriptor* Source_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Source_reflection_ = NULL;
const ::google::protobuf::Descriptor* ADSB_Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ADSB_Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ADSB_Message_SourceType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Sample_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sample_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sample_2eproto() {
  protobuf_AddDesc_sample_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sample.proto");
  GOOGLE_CHECK(file != NULL);
  GeoCoordinates_descriptor_ = file->message_type(0);
  static const int GeoCoordinates_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoCoordinates, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoCoordinates, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoCoordinates, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoCoordinates, epsg_),
  };
  GeoCoordinates_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeoCoordinates_descriptor_,
      GeoCoordinates::default_instance_,
      GeoCoordinates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoCoordinates, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeoCoordinates, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeoCoordinates));
  Aircraft_descriptor_ = file->message_type(1);
  static const int Aircraft_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, icao24_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, gpscourse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, aerialspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, aerialalt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, verticalspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, description_),
  };
  Aircraft_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Aircraft_descriptor_,
      Aircraft::default_instance_,
      Aircraft_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Aircraft));
  Source_descriptor_ = file->message_type(2);
  static const int Source_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, sourcename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, devicename_),
  };
  Source_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Source_descriptor_,
      Source::default_instance_,
      Source_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Source, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Source));
  ADSB_Message_descriptor_ = file->message_type(3);
  static const int ADSB_Message_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADSB_Message, sourcetype_),
  };
  ADSB_Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ADSB_Message_descriptor_,
      ADSB_Message::default_instance_,
      ADSB_Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADSB_Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADSB_Message, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ADSB_Message, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ADSB_Message));
  ADSB_Message_SourceType_descriptor_ = ADSB_Message_descriptor_->enum_type(0);
  Sample_descriptor_ = file->message_type(4);
  static const int Sample_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, aircraft_),
  };
  Sample_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sample_descriptor_,
      Sample::default_instance_,
      Sample_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sample));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sample_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeoCoordinates_descriptor_, &GeoCoordinates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Aircraft_descriptor_, &Aircraft::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Source_descriptor_, &Source::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ADSB_Message_descriptor_, &ADSB_Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sample_descriptor_, &Sample::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sample_2eproto() {
  delete GeoCoordinates::default_instance_;
  delete GeoCoordinates_reflection_;
  delete Aircraft::default_instance_;
  delete Aircraft_reflection_;
  delete Source::default_instance_;
  delete Source_reflection_;
  delete ADSB_Message::default_instance_;
  delete ADSB_Message_reflection_;
  delete Sample::default_instance_;
  delete Sample_reflection_;
}

void protobuf_AddDesc_sample_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014sample.proto\022\004ADSB\"U\n\016GeoCoordinates\022\020"
    "\n\010latitude\030\001 \002(\001\022\021\n\tlongitude\030\002 \002(\001\022\020\n\010a"
    "ltitude\030\003 \001(\001\022\014\n\004epsg\030\004 \001(\r\"\310\001\n\010Aircraft"
    "\022\021\n\ttimestamp\030\001 \002(\004\022\016\n\006icao24\030\002 \002(\t\022\n\n\002i"
    "d\030\003 \002(\t\022&\n\010position\030\004 \002(\0132\024.ADSB.GeoCoor"
    "dinates\022\021\n\tgpsCourse\030\006 \001(\001\022\023\n\013aerialSpee"
    "d\030\007 \001(\001\022\021\n\taerialAlt\030\010 \001(\001\022\025\n\rverticalSp"
    "eed\030\t \001(\001\022\023\n\013description\030\n \001(\t\"0\n\006Source"
    "\022\022\n\nsourceName\030\001 \002(\t\022\022\n\ndeviceName\030\002 \001(\t"
    "\"e\n\014ADSB_Message\0221\n\nsourceType\030\001 \002(\0162\035.A"
    "DSB.ADSB_Message.SourceType\"\030\n\nSourceTyp"
    "e\022\n\n\006Sample\020\001*\010\010d\020\200\200\200\200\002\"x\n\006Sample\022\034\n\006sou"
    "rce\030\001 \002(\0132\014.ADSB.Source\022 \n\010aircraft\030\002 \003("
    "\0132\016.ADSB.Aircraft2.\n\004data\022\022.ADSB.ADSB_Me"
    "ssage\030d \001(\0132\014.ADSB.Sample", 585);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sample.proto", &protobuf_RegisterTypes);
  GeoCoordinates::default_instance_ = new GeoCoordinates();
  Aircraft::default_instance_ = new Aircraft();
  Source::default_instance_ = new Source();
  ADSB_Message::default_instance_ = new ADSB_Message();
  Sample::default_instance_ = new Sample();
  GeoCoordinates::default_instance_->InitAsDefaultInstance();
  Aircraft::default_instance_->InitAsDefaultInstance();
  Source::default_instance_->InitAsDefaultInstance();
  ADSB_Message::default_instance_->InitAsDefaultInstance();
  Sample::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ADSB::ADSB_Message::default_instance(),
    100, 11, false, false,
    &::ADSB::Sample::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sample_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sample_2eproto {
  StaticDescriptorInitializer_sample_2eproto() {
    protobuf_AddDesc_sample_2eproto();
  }
} static_descriptor_initializer_sample_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GeoCoordinates::kLatitudeFieldNumber;
const int GeoCoordinates::kLongitudeFieldNumber;
const int GeoCoordinates::kAltitudeFieldNumber;
const int GeoCoordinates::kEpsgFieldNumber;
#endif  // !_MSC_VER

GeoCoordinates::GeoCoordinates()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADSB.GeoCoordinates)
}

void GeoCoordinates::InitAsDefaultInstance() {
}

GeoCoordinates::GeoCoordinates(const GeoCoordinates& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ADSB.GeoCoordinates)
}

void GeoCoordinates::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  altitude_ = 0;
  epsg_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeoCoordinates::~GeoCoordinates() {
  // @@protoc_insertion_point(destructor:ADSB.GeoCoordinates)
  SharedDtor();
}

void GeoCoordinates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GeoCoordinates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeoCoordinates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeoCoordinates_descriptor_;
}

const GeoCoordinates& GeoCoordinates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sample_2eproto();
  return *default_instance_;
}

GeoCoordinates* GeoCoordinates::default_instance_ = NULL;

GeoCoordinates* GeoCoordinates::New() const {
  return new GeoCoordinates;
}

void GeoCoordinates::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GeoCoordinates*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(latitude_, epsg_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeoCoordinates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADSB.GeoCoordinates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double latitude = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }

      // required double longitude = 2;
      case 2: {
        if (tag == 17) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_altitude;
        break;
      }

      // optional double altitude = 3;
      case 3: {
        if (tag == 25) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_epsg;
        break;
      }

      // optional uint32 epsg = 4;
      case 4: {
        if (tag == 32) {
         parse_epsg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epsg_)));
          set_has_epsg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADSB.GeoCoordinates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADSB.GeoCoordinates)
  return false;
#undef DO_
}

void GeoCoordinates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADSB.GeoCoordinates)
  // required double latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // required double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // optional double altitude = 3;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->altitude(), output);
  }

  // optional uint32 epsg = 4;
  if (has_epsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->epsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ADSB.GeoCoordinates)
}

::google::protobuf::uint8* GeoCoordinates::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ADSB.GeoCoordinates)
  // required double latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // required double longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // optional double altitude = 3;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->altitude(), target);
  }

  // optional uint32 epsg = 4;
  if (has_epsg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->epsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADSB.GeoCoordinates)
  return target;
}

int GeoCoordinates::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double altitude = 3;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

    // optional uint32 epsg = 4;
    if (has_epsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->epsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeoCoordinates::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeoCoordinates* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeoCoordinates*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeoCoordinates::MergeFrom(const GeoCoordinates& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_epsg()) {
      set_epsg(from.epsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeoCoordinates::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoCoordinates::CopyFrom(const GeoCoordinates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoCoordinates::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GeoCoordinates::Swap(GeoCoordinates* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(altitude_, other->altitude_);
    std::swap(epsg_, other->epsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeoCoordinates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeoCoordinates_descriptor_;
  metadata.reflection = GeoCoordinates_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Aircraft::kTimestampFieldNumber;
const int Aircraft::kIcao24FieldNumber;
const int Aircraft::kIdFieldNumber;
const int Aircraft::kPositionFieldNumber;
const int Aircraft::kGpsCourseFieldNumber;
const int Aircraft::kAerialSpeedFieldNumber;
const int Aircraft::kAerialAltFieldNumber;
const int Aircraft::kVerticalSpeedFieldNumber;
const int Aircraft::kDescriptionFieldNumber;
#endif  // !_MSC_VER

Aircraft::Aircraft()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADSB.Aircraft)
}

void Aircraft::InitAsDefaultInstance() {
  position_ = const_cast< ::ADSB::GeoCoordinates*>(&::ADSB::GeoCoordinates::default_instance());
}

Aircraft::Aircraft(const Aircraft& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ADSB.Aircraft)
}

void Aircraft::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  icao24_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  gpscourse_ = 0;
  aerialspeed_ = 0;
  aerialalt_ = 0;
  verticalspeed_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Aircraft::~Aircraft() {
  // @@protoc_insertion_point(destructor:ADSB.Aircraft)
  SharedDtor();
}

void Aircraft::SharedDtor() {
  if (icao24_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icao24_;
  }
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
    delete position_;
  }
}

void Aircraft::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Aircraft::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Aircraft_descriptor_;
}

const Aircraft& Aircraft::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sample_2eproto();
  return *default_instance_;
}

Aircraft* Aircraft::default_instance_ = NULL;

Aircraft* Aircraft::New() const {
  return new Aircraft;
}

void Aircraft::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Aircraft*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gpscourse_, verticalspeed_);
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_icao24()) {
      if (icao24_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icao24_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_position()) {
      if (position_ != NULL) position_->::ADSB::GeoCoordinates::Clear();
    }
  }
  if (has_description()) {
    if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      description_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Aircraft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADSB.Aircraft)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_icao24;
        break;
      }

      // required string icao24 = 2;
      case 2: {
        if (tag == 18) {
         parse_icao24:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icao24()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icao24().data(), this->icao24().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "icao24");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // required string id = 3;
      case 3: {
        if (tag == 26) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_position;
        break;
      }

      // required .ADSB.GeoCoordinates position = 4;
      case 4: {
        if (tag == 34) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_gpsCourse;
        break;
      }

      // optional double gpsCourse = 6;
      case 6: {
        if (tag == 49) {
         parse_gpsCourse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gpscourse_)));
          set_has_gpscourse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_aerialSpeed;
        break;
      }

      // optional double aerialSpeed = 7;
      case 7: {
        if (tag == 57) {
         parse_aerialSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aerialspeed_)));
          set_has_aerialspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_aerialAlt;
        break;
      }

      // optional double aerialAlt = 8;
      case 8: {
        if (tag == 65) {
         parse_aerialAlt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aerialalt_)));
          set_has_aerialalt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_verticalSpeed;
        break;
      }

      // optional double verticalSpeed = 9;
      case 9: {
        if (tag == 73) {
         parse_verticalSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &verticalspeed_)));
          set_has_verticalspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_description;
        break;
      }

      // optional string description = 10;
      case 10: {
        if (tag == 82) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADSB.Aircraft)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADSB.Aircraft)
  return false;
#undef DO_
}

void Aircraft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADSB.Aircraft)
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // required string icao24 = 2;
  if (has_icao24()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icao24().data(), this->icao24().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icao24");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->icao24(), output);
  }

  // required string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id(), output);
  }

  // required .ADSB.GeoCoordinates position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->position(), output);
  }

  // optional double gpsCourse = 6;
  if (has_gpscourse()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->gpscourse(), output);
  }

  // optional double aerialSpeed = 7;
  if (has_aerialspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->aerialspeed(), output);
  }

  // optional double aerialAlt = 8;
  if (has_aerialalt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->aerialalt(), output);
  }

  // optional double verticalSpeed = 9;
  if (has_verticalspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->verticalspeed(), output);
  }

  // optional string description = 10;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ADSB.Aircraft)
}

::google::protobuf::uint8* Aircraft::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ADSB.Aircraft)
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // required string icao24 = 2;
  if (has_icao24()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icao24().data(), this->icao24().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icao24");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->icao24(), target);
  }

  // required string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  // required .ADSB.GeoCoordinates position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->position(), target);
  }

  // optional double gpsCourse = 6;
  if (has_gpscourse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->gpscourse(), target);
  }

  // optional double aerialSpeed = 7;
  if (has_aerialspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->aerialspeed(), target);
  }

  // optional double aerialAlt = 8;
  if (has_aerialalt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->aerialalt(), target);
  }

  // optional double verticalSpeed = 9;
  if (has_verticalspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->verticalspeed(), target);
  }

  // optional string description = 10;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADSB.Aircraft)
  return target;
}

int Aircraft::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required string icao24 = 2;
    if (has_icao24()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icao24());
    }

    // required string id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .ADSB.GeoCoordinates position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional double gpsCourse = 6;
    if (has_gpscourse()) {
      total_size += 1 + 8;
    }

    // optional double aerialSpeed = 7;
    if (has_aerialspeed()) {
      total_size += 1 + 8;
    }

    // optional double aerialAlt = 8;
    if (has_aerialalt()) {
      total_size += 1 + 8;
    }

    // optional double verticalSpeed = 9;
    if (has_verticalspeed()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string description = 10;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Aircraft::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Aircraft* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Aircraft*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Aircraft::MergeFrom(const Aircraft& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_icao24()) {
      set_icao24(from.icao24());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      mutable_position()->::ADSB::GeoCoordinates::MergeFrom(from.position());
    }
    if (from.has_gpscourse()) {
      set_gpscourse(from.gpscourse());
    }
    if (from.has_aerialspeed()) {
      set_aerialspeed(from.aerialspeed());
    }
    if (from.has_aerialalt()) {
      set_aerialalt(from.aerialalt());
    }
    if (from.has_verticalspeed()) {
      set_verticalspeed(from.verticalspeed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Aircraft::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Aircraft::CopyFrom(const Aircraft& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aircraft::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void Aircraft::Swap(Aircraft* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(icao24_, other->icao24_);
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(gpscourse_, other->gpscourse_);
    std::swap(aerialspeed_, other->aerialspeed_);
    std::swap(aerialalt_, other->aerialalt_);
    std::swap(verticalspeed_, other->verticalspeed_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Aircraft::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Aircraft_descriptor_;
  metadata.reflection = Aircraft_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Source::kSourceNameFieldNumber;
const int Source::kDeviceNameFieldNumber;
#endif  // !_MSC_VER

Source::Source()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADSB.Source)
}

void Source::InitAsDefaultInstance() {
}

Source::Source(const Source& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ADSB.Source)
}

void Source::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sourcename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Source::~Source() {
  // @@protoc_insertion_point(destructor:ADSB.Source)
  SharedDtor();
}

void Source::SharedDtor() {
  if (sourcename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourcename_;
  }
  if (devicename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devicename_;
  }
  if (this != default_instance_) {
  }
}

void Source::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Source::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Source_descriptor_;
}

const Source& Source::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sample_2eproto();
  return *default_instance_;
}

Source* Source::default_instance_ = NULL;

Source* Source::New() const {
  return new Source;
}

void Source::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_sourcename()) {
      if (sourcename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sourcename_->clear();
      }
    }
    if (has_devicename()) {
      if (devicename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devicename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Source::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADSB.Source)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sourceName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourcename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourcename().data(), this->sourcename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sourcename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deviceName;
        break;
      }

      // optional string deviceName = 2;
      case 2: {
        if (tag == 18) {
         parse_deviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "devicename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADSB.Source)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADSB.Source)
  return false;
#undef DO_
}

void Source::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADSB.Source)
  // required string sourceName = 1;
  if (has_sourcename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcename().data(), this->sourcename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourcename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sourcename(), output);
  }

  // optional string deviceName = 2;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->devicename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ADSB.Source)
}

::google::protobuf::uint8* Source::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ADSB.Source)
  // required string sourceName = 1;
  if (has_sourcename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourcename().data(), this->sourcename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourcename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sourcename(), target);
  }

  // optional string deviceName = 2;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "devicename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devicename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADSB.Source)
  return target;
}

int Source::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sourceName = 1;
    if (has_sourcename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourcename());
    }

    // optional string deviceName = 2;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Source::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Source* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Source*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Source::MergeFrom(const Source& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourcename()) {
      set_sourcename(from.sourcename());
    }
    if (from.has_devicename()) {
      set_devicename(from.devicename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Source::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Source::CopyFrom(const Source& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Source::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Source::Swap(Source* other) {
  if (other != this) {
    std::swap(sourcename_, other->sourcename_);
    std::swap(devicename_, other->devicename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Source::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Source_descriptor_;
  metadata.reflection = Source_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ADSB_Message_SourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADSB_Message_SourceType_descriptor_;
}
bool ADSB_Message_SourceType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ADSB_Message_SourceType ADSB_Message::Sample;
const ADSB_Message_SourceType ADSB_Message::SourceType_MIN;
const ADSB_Message_SourceType ADSB_Message::SourceType_MAX;
const int ADSB_Message::SourceType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ADSB_Message::kSourceTypeFieldNumber;
#endif  // !_MSC_VER

ADSB_Message::ADSB_Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADSB.ADSB_Message)
}

void ADSB_Message::InitAsDefaultInstance() {
}

ADSB_Message::ADSB_Message(const ADSB_Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ADSB.ADSB_Message)
}

void ADSB_Message::SharedCtor() {
  _cached_size_ = 0;
  sourcetype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ADSB_Message::~ADSB_Message() {
  // @@protoc_insertion_point(destructor:ADSB.ADSB_Message)
  SharedDtor();
}

void ADSB_Message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ADSB_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADSB_Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ADSB_Message_descriptor_;
}

const ADSB_Message& ADSB_Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sample_2eproto();
  return *default_instance_;
}

ADSB_Message* ADSB_Message::default_instance_ = NULL;

ADSB_Message* ADSB_Message::New() const {
  return new ADSB_Message;
}

void ADSB_Message::Clear() {
  _extensions_.Clear();
  sourcetype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ADSB_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADSB.ADSB_Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ADSB.ADSB_Message.SourceType sourceType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ADSB::ADSB_Message_SourceType_IsValid(value)) {
            set_sourcetype(static_cast< ::ADSB::ADSB_Message_SourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADSB.ADSB_Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADSB.ADSB_Message)
  return false;
#undef DO_
}

void ADSB_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADSB.ADSB_Message)
  // required .ADSB.ADSB_Message.SourceType sourceType = 1;
  if (has_sourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sourcetype(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ADSB.ADSB_Message)
}

::google::protobuf::uint8* ADSB_Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ADSB.ADSB_Message)
  // required .ADSB.ADSB_Message.SourceType sourceType = 1;
  if (has_sourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sourcetype(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADSB.ADSB_Message)
  return target;
}

int ADSB_Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ADSB.ADSB_Message.SourceType sourceType = 1;
    if (has_sourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sourcetype());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADSB_Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ADSB_Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ADSB_Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ADSB_Message::MergeFrom(const ADSB_Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourcetype()) {
      set_sourcetype(from.sourcetype());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ADSB_Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADSB_Message::CopyFrom(const ADSB_Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADSB_Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void ADSB_Message::Swap(ADSB_Message* other) {
  if (other != this) {
    std::swap(sourcetype_, other->sourcetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata ADSB_Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ADSB_Message_descriptor_;
  metadata.reflection = ADSB_Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sample::kSourceFieldNumber;
const int Sample::kAircraftFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int Sample::kDataFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ADSB::ADSB_Message,
    ::google::protobuf::internal::MessageTypeTraits< ::ADSB::Sample >, 11, false >
  Sample::data(kDataFieldNumber, ::ADSB::Sample::default_instance());
Sample::Sample()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ADSB.Sample)
}

void Sample::InitAsDefaultInstance() {
  source_ = const_cast< ::ADSB::Source*>(&::ADSB::Source::default_instance());
}

Sample::Sample(const Sample& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ADSB.Sample)
}

void Sample::SharedCtor() {
  _cached_size_ = 0;
  source_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sample::~Sample() {
  // @@protoc_insertion_point(destructor:ADSB.Sample)
  SharedDtor();
}

void Sample::SharedDtor() {
  if (this != default_instance_) {
    delete source_;
  }
}

void Sample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sample::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sample_descriptor_;
}

const Sample& Sample::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sample_2eproto();
  return *default_instance_;
}

Sample* Sample::default_instance_ = NULL;

Sample* Sample::New() const {
  return new Sample;
}

void Sample::Clear() {
  if (has_source()) {
    if (source_ != NULL) source_->::ADSB::Source::Clear();
  }
  aircraft_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ADSB.Sample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ADSB.Source source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_aircraft;
        break;
      }

      // repeated .ADSB.Aircraft aircraft = 2;
      case 2: {
        if (tag == 18) {
         parse_aircraft:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aircraft()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_aircraft;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ADSB.Sample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ADSB.Sample)
  return false;
#undef DO_
}

void Sample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ADSB.Sample)
  // required .ADSB.Source source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->source(), output);
  }

  // repeated .ADSB.Aircraft aircraft = 2;
  for (int i = 0; i < this->aircraft_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->aircraft(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ADSB.Sample)
}

::google::protobuf::uint8* Sample::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ADSB.Sample)
  // required .ADSB.Source source = 1;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->source(), target);
  }

  // repeated .ADSB.Aircraft aircraft = 2;
  for (int i = 0; i < this->aircraft_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->aircraft(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ADSB.Sample)
  return target;
}

int Sample::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ADSB.Source source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source());
    }

  }
  // repeated .ADSB.Aircraft aircraft = 2;
  total_size += 1 * this->aircraft_size();
  for (int i = 0; i < this->aircraft_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aircraft(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sample::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sample* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sample*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sample::MergeFrom(const Sample& from) {
  GOOGLE_CHECK_NE(&from, this);
  aircraft_.MergeFrom(from.aircraft_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      mutable_source()->::ADSB::Source::MergeFrom(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sample::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample::CopyFrom(const Sample& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_source()) {
    if (!this->source().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->aircraft())) return false;
  return true;
}

void Sample::Swap(Sample* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    aircraft_.Swap(&other->aircraft_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sample::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sample_descriptor_;
  metadata.reflection = Sample_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ADSB

// @@protoc_insertion_point(global_scope)
